/*
 * Ory Hydra API
 *
 * Documentation for all of Ory Hydra's APIs. 
 *
 * The version of the OpenAPI document: v2.4.0-alpha.1
 * Contact: hi@ory.sh
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct VerifyUserCodeRequest {
    /// ID is the identifier (\"device challenge\") of the device request. It is used to identify the session.
    #[serde(rename = "challenge", skip_serializing_if = "Option::is_none")]
    pub challenge: Option<String>,
    #[serde(rename = "client", skip_serializing_if = "Option::is_none")]
    pub client: Option<Box<models::OAuth2Client>>,
    #[serde(rename = "device_code_request_id", skip_serializing_if = "Option::is_none")]
    pub device_code_request_id: Option<String>,
    #[serde(rename = "handled_at", skip_serializing_if = "Option::is_none")]
    pub handled_at: Option<String>,
    /// RequestURL is the original Device Authorization URL requested.
    #[serde(rename = "request_url", skip_serializing_if = "Option::is_none")]
    pub request_url: Option<String>,
    #[serde(rename = "requested_access_token_audience", skip_serializing_if = "Option::is_none")]
    pub requested_access_token_audience: Option<Vec<String>>,
    #[serde(rename = "requested_scope", skip_serializing_if = "Option::is_none")]
    pub requested_scope: Option<Vec<String>>,
}

impl VerifyUserCodeRequest {
    pub fn new() -> VerifyUserCodeRequest {
        VerifyUserCodeRequest {
            challenge: None,
            client: None,
            device_code_request_id: None,
            handled_at: None,
            request_url: None,
            requested_access_token_audience: None,
            requested_scope: None,
        }
    }
}

